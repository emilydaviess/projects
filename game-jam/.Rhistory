JOIN attrib_visit f on f.id = agv.visit_id
left join agg_costs_per_visit e on agv.visit_id = e.visit_id
where agv.visit_date > '2018-10-01 00:00:00'
")
ppcdata = dbFetch(data_ppc, n=-1)
visit_duplicate <- aggregate(data_sales$event_item_id~data_sales$visit_id, FUN=length)
colnames(visit_duplicate) <- c("visit_id", "visit_duplicate_count")
data <- merge(data_sales, visit_duplicate, by = c("visit_id"))
#Get only the viistor ID's from data sales, and grab data between our given dates, and the visitor ID's from sales data (to get previous visits.)
visitor_ids <- unique(data$visitor_id)
ppcdata$visit_date <- as.POSIXct(ppcdata$visit_date, format="%Y-%m-%d %H:%M:%S")
ppcdata <- ppcdata[ppcdata$visitor_id %in% visitor_ids | ppcdata$visit_date > '2019-06-01 00:00:00',]
ppcdata <- merge(data,ppcdata, by=c("visit_id"), all=TRUE)
#ppcdata$campaign_name[ppcdata$campaign_name<"Brand > Pure Brand"] <- "[Brand] - [Pure] - [E]"
#PPC Campaign data
agg_ppc_camp_sales <- aggregate(ppcdata$fm_sales~ppcdata$campaign_name, FUN=sum)
colnames(agg_ppc_camp_sales) <- c("campaign_name","fm_sales")
agg_ppc_camp_costs <- aggregate(ppcdata$cost~ppcdata$campaign_name, FUN = sum)
colnames(agg_ppc_camp_costs) <- c("campaign_name","cost")
agg_ppc_camp_visits <- aggregate(ppcdata$visits~ppcdata$campaign_name, FUN = sum)
colnames(agg_ppc_camp_visits) <- c("campaign_name","visits")
agg_ppc_camp_rev <- aggregate(ppcdata$fm_revenue~ppcdata$campaign_name, FUN=sum, na.action = na.omit)
colnames(agg_ppc_camp_rev) <- c("campaign_name","fm_rev")
ppc_camp_summary <- merge(agg_ppc_camp_visits,agg_ppc_camp_sales,by = "campaign_name", all.x = TRUE)
ppc_camp_summary <- merge(ppc_camp_summary, agg_ppc_camp_costs, by = "campaign_name", all.x = TRUE)
ppc_camp_summary <- merge(ppc_camp_summary, agg_ppc_camp_rev, by = "campaign_name", all.x = TRUE)
ppc_camp_summary$fm_sales <- round(ppc_camp_summary$fm_sales, 2)
ppc_camp_summary$fm_rev <- round(ppc_camp_summary$fm_rev, 2)
ppc_camp_summary$CPA <- round(ppc_camp_summary$cost / ppc_camp_summary$fm_sales,2)
ppc_camp_summary$CPC <- round(ppc_camp_summary$cost / ppc_camp_summary$visits,2)
ppc_camp_summary$CR <- round(ppc_camp_summary$fm_sales / ppc_camp_summary$visits,4)
ppc_camp_summary$ROI <- (round((ppc_camp_summary$fm_rev - ppc_camp_summary$cost )/ppc_camp_summary$cost,4))*100
ppc_camp_summary$COS <- (round(ppc_camp_summary$cost/ppc_camp_summary$fm_rev,2))*100
#save(ppc_camp_summary, file = "Data/ppc_data.Rda")
#load("Data/ppc_data.Rda")
#ppc_camp_summary <- ppc_camp_summary[which(ppc_camp_summary$fm_sales > 5),]
ppc_camp_summary$campaign_name <- factor(ppc_camp_summary$campaign_name, levels = unique(ppc_camp_summary$campaign_name)[order(ppc_camp_summary$fm_sales, decreasing = TRUE)])
ppc_camp_summary <- ppc_camp_summary[ppc_camp_summary$visits > 10,]
ppc_camp_summary$campaign_name <- factor(ppc_camp_summary$campaign_name)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$visits,
name = "Visits",
type = "bar",
text = ppc_camp_summary$visits,
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
add_trace(y = ~ppc_camp_summary$fm_sales,
name = 'FM Goal Completions',
text = round(ppc_camp_summary$fm_sales)) %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE, list(title="Campaign Name")),
title = paste("Adwords Campaign Summary"),
yaxis = list(title="Visits"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$CR,
name = "Conversion Rate",
type = "bar",
text = paste(round(ppc_camp_summary$CR * 100, digits = 2),"%"),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="Conversion Rate"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$CPA,
name = "Cost Per Conversion",
type = "bar",
text = round(ppc_camp_summary$CPA,digits = 2),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
add_trace(y = ~ppc_camp_summary$CPC,
name = 'Cost Per Click',
text = round(ppc_camp_summary$CPC)) %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="CPA"))
print(p)
set.seed(123)
# Data manipulation
library(data.table)
library(dplyr)
library(DT)
library(data.table)
library(dplyr)
library(DT)
library(lubridate)
library(ggplot2)
library(plotrix)
library(corrplot)
library(ggdendro)
library(ggrepel)
library(ggplot2)
library(plotrix)
install.packages("plotrix")
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
install.packages("ggdendro")
library(ggdendro)
install.packages("ggrepel")
library(ggrepel)
install.packages("ggrepel")
## Wordcloud
install.packages("ggrepel")
install.packages("ggrepel")
library(wordcloud)
library(wordcloud)
## Wordcloud
install.packages("wordcloud")
library(wordcloud)
library(tidytext)
library(stringr)
library(tm)
library(sentimentr)
library(wordcloud)
library(RSentiment)
if (!require("tidytext")) install.packages("tidytext")
library(tidytext)
if (!require("stringr")) install.packages("stringr")
library(stringr)
if (!require("tm")) install.packages("tm")
library(tm)
if (!require("sentimentr")) install.packages("sentimentr")
library(sentimentr)
if (!require("wordcloud")) install.packages("wordcloud")
library(wordcloud)
if (!require("RSentiment")) install.packages("RSentiment")
library(RSentiment)
setwd("~/Documents/Work/Game Jam")
ca_videos <- read.csv("Data/Youtube/CAvideos.csv")
de_videos <- read.csv("Data/Youtube/DEvideos.csv")
fr_videos <- read.csv("Data/Youtube/FRvideos.csv")
gb_videos <- read.csv("Data/Youtube/GBvideos.csv")
in_videos <- read.csv("Data/Youtube/INvideos.csv")
jp_videos <- read.csv("Data/Youtube/JPvideos.csv")
kr_videos <- read.csv("Data/Youtube/KRvideos.csv")
mx_videos <- read.csv("Data/Youtube/MXvideos.csv")
ru_videos <- read.csv("Data/Youtube/RUvideos.csv")
us_videos <- read.csv("Data/Youtube/USvideos.csv")
ca_videos$country <- "ca"
de_videos$country <- "de"
fr_videos$country <- "fr"
gb_videos$country <- "gb"
in_videos$country <- "in"
jp_videos$country <- "jp"
kr_videos$country <- "kr"
mx_videos$country <- "mx"
ru_videos$country <- "ru"
us_videos$country <- "us"
#videos <- as.data.table(rbind(gb,fr,ca,us,de))
videos <- rbind(ca_videos, de_videos, fr_videos, gb_videos, in_videos, jp_videos, kr_videos, mx_videos, ru_videos, us_videos)
videos$trending_date <- ydm(videos$trending_date)
View(videos)
videos$publish_time <- ymd(substr(videos$publish_time,start = 1,stop = 10))
View(videos)
View(us_videos)
videos$dif_days <- videos$trending_date-videos$publish_time
#Analyse Correlation between variables!
corrplot.mixed(corr = cor(videos[,c("category_id","views","likes","dislikes","comment_count"),with=F]))
#Analyse Correlation between variables!
corrplot.mixed(corr = cor(videos[,c("category_id","views","likes","dislikes","comment_count"),with=F]))
#Analyse Correlation between variables!
corrplot.mixed(corr = cor(videos[,c("category_id","views","likes","dislikes","comment_count"),with=FALSE]))
#Analyse Correlation between variables!
corrplot.mixed(corr = cor(videos[,c("category_id","views","likes","dislikes","comment_count")]))
mvideo <- videos[,.("Total_Views"=round(max(views,na.rm = T),digits = 2)),by=.(title,thumbnail_link)][order(-Total_Views)]
mvideo <- videos[,.("Total_Views"=round(max(views,na.rm = T),digits = 2)),by=(title,thumbnail_link)][order(-Total_Views)]
mvideo <- videos[,.("Total_Views"=round(max(views,na.rm = T),digits = 2)),by=.(title,thumbnail_link)][order(-Total_Views)]
#videos <- as.data.table(rbind(gb,fr,ca,us,de))
videos <- as.data.table(rbind(ca_videos, de_videos, fr_videos, gb_videos, in_videos, jp_videos, kr_videos, mx_videos, ru_videos, us_videos))
videos$trending_date <- ydm(videos$trending_date)
videos$publish_time <- ymd(substr(videos$publish_time,start = 1,stop = 10))
videos$dif_days <- videos$trending_date-videos$publish_time
#Analyse Correlation between variables!
corrplot.mixed(corr = cor(videos[,c("category_id","views","likes","dislikes","comment_count")]))
mvideo <- videos[,.("Total_Views"=round(max(views,na.rm = T),digits = 2)),by=.(title,thumbnail_link)][order(-Total_Views)]
View(mvideo)
View(mvideo)
View(videos)
mvideo %>%
mutate(image = paste0('<img width="80%" height="80%" src="', thumbnail_link , '"></img>')) %>%
arrange(-Total_Views) %>%
top_n(10,wt = Total_Views) %>%
select(image, title, Total_Views) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#2. Find the Most Viewed Videos.
mvideo <- videos[,.("Total_Views"=round(sum(views,na.rm = T),digits = 2)),
by=.(title,thumbnail_link)][order(-Total_Views)]
View(mvideo)
mvideo <- videos[,("Total_Views"=round(sum(views,na.rm = T),digits = 2)),
by=(title,thumbnail_link)][order(-Total_Views)]
mvideo_viewed <- videos[,.("Total_Views"=round(sum(views,na.rm = T),digits = 2)),
by=.(title,thumbnail_link)]
mvideo_viewed %>%
mutate(image = paste0('<img width="80%" height="80%" src="', thumbnail_link , '"></img>')) %>%
arrange(-Total_Views) %>%
top_n(10,wt = Total_Views) %>%
select(image, title, Total_Views) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
mvideo_like <- videos[,.("Total_Likes"=round(sum(likes,na.rm = T),digits = 2)),by=.(title,thumbnail_link)][order(-Total_Likes)]
mvideo_like %>%
mutate(image = paste0('<img width="80%" height="80%" src="', thumbnail_link , '"></img>')) %>%
arrange(-Total_Likes) %>%
top_n(10,wt = Total_Likes) %>%
select(image, title, Total_Likes) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#DISLIKES
mvideo_dislikes <- videos[,.("Total_Dislikes"=round(max(dislikes,na.rm = T),digits = 2)),
by=.(title,thumbnail_link)][order(-Total_Dislikes)]
mvideo_dislikes %>%
mutate(image = paste0('<img width="80%" height="80%" src="', thumbnail_link , '"></img>')) %>%
arrange(-Total_Dislikes) %>%
top_n(10,wt = Total_Dislikes) %>%
select(image, title, Total_Dislikes) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#COMMENT COUNT
mvideo_comments <- videos[,.("Total_comments"=round(max(comment_count,na.rm = T),digits = 2)),by=.(title,thumbnail_link)][order(-Total_comments)]
mvideo_comments %>%
mutate(image = paste0('<img width="80%" height="80%" src="', thumbnail_link , '"></img>')) %>%
arrange(-Total_comments) %>%
top_n(10,wt = Total_comments) %>%
select(image, title, Total_comments) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#3. Top 10 in percentage
#Because the absolute number of likes, dislikes and comments didnt show all the information to really know if the video had an impact or not we will see their percentages.
mvideo_like_perc <- videos[,.("Percentage_Likes"=round(100*max(likes,na.rm = T)/max(views,na.rm = T),digits = 2)),by=.(title,thumbnail_link)][order(-Percentage_Likes)]
mvideo_like_perc %>%
mutate(image = paste0('<img width="80%" height="80%" src="', thumbnail_link , '"></img>')) %>%
arrange(-Percentage_Likes) %>%
top_n(10,wt = Percentage_Likes) %>%
select(image, title, Percentage_Likes) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#3. Top 10 in percentage
#Because the absolute number of likes, dislikes and comments didnt show all the information to really know if the video had an impact or not we will see their percentages.
mvideo_like_perc <- videos[,.("Percentage_Likes"=round(100*sum(likes,na.rm = T)/sum(views,na.rm = T),digits = 2)),by=.(title,thumbnail_link)][order(-Percentage_Likes)]
mvideo_like_perc %>%
mutate(image = paste0('<img width="80%" height="80%" src="', thumbnail_link , '"></img>')) %>%
arrange(-Percentage_Likes) %>%
top_n(10,wt = Percentage_Likes) %>%
select(image, title, Percentage_Likes) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#4.Top Trending Channels in all Countries
ggplot(videos[,.N,by=channel_title][order(-N)][1:10],aes(reorder(channel_title,-N),N,fill=channel_title))+geom_bar(stat="identity")+geom_label(aes(label=N))+guides(fill="none")+theme(axis.text.x = element_text(angle = 45,hjust = 1))+  labs(caption="Donyoe",title=" Top trending channel titles in all countries")+
xlab(NULL)+ylab(NULL)+coord_flip()
names(channel_title)
names(videos)
#4.Top Trending Channels in all Countries
p <- ggplot(videos[,.N,
by=channel_title][order(-N)][1:10],
aes(reorder(channel_title,-N),N,fill=channel_title))
print(p)
print(p)
p <- ggplot(videos[,.N,
by=channel_title][order(-N)][1:10],
aes(reorder(channel_title,-N),N,fill=channel_title))
p <- p + geom_bar(stat="identity")+geom_label(aes(label=N))+guides(fill="none")+theme(axis.text.x = element_text(angle = 45,hjust = 1))+  labs(caption="Donyoe",title=" Top trending channel titles in all countries")+
xlab(NULL)+ylab(NULL)+coord_flip()
print(p)
ggplot(videos[,.N,by=category_id][order(-N)],
aes(reorder(category_id,-N),N,fill=as.factor(category_id)))
+geom_bar(stat="identity")
+guides(fill="none")
+labs(caption="Donyoe",title=" Top Category ID")
+xlab(NULL)+ylab(NULL)
#5.
ggplot(videos[,.N,by=category_id][order(-N)],
aes(reorder(category_id,-N),N,fill=as.factor(category_id)))
+geom_bar(stat="identity")
+guides(fill="none")
+labs(caption="Donyoe",title=" Top Category ID")
#5.How much time passes between published and trending?
ggplot(videos[dif_days<30],aes(as.factor(dif_days),fill=as.factor(dif_days)))+geom_bar()+guides(fill="none")+labs(caption="Donyoe",title=" Time between published and trending",subtitle="In days")+xlab(NULL)+ylab(NULL)
ggplot(videos[dif_days<30],
aes(as.factor(dif_days),
fill=as.factor(dif_days)))
+geom_bar()
ggplot(videos[dif_days<30],
aes(as.factor(dif_days),
fill=as.factor(dif_days)))
+geom_bar()
+guides(fill="none")
+labs(caption="Donyoe",title=" Time between published and trending",subtitle="In days")
+xlab(NULL)+ylab(NULL)
#5.How much time passes between published and trending?
ggplot(videos[dif_days<30],
aes(as.factor(dif_days),
fill=as.factor(dif_days)))+geom_bar()+guides(fill="none")+labs(caption="Donyoe",title=" Time between published and trending",subtitle="In days")+xlab(NULL)+ylab(NULL)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
biga <- unnest_tokens(videos,bigram, title, token = "ngrams", n = 2)
#Getting a feel of the dataset.
head(gb_videos)
#Now, let's see some information about our dataset
str(gb_videos)
View(gb_videos)
str(gb_videos$description)
View(gb_videos)
gb_videos$trending_date <- ydm(gb_videos$trending_date)
gb_videos$publish_time <- ymd(substr(gb_videos$publish_time,start = 1,stop = 10))
gb_videos$dif_days <- gb_videos$trending_date-gb_videos$publish_time
gb_videos$trending_date
str(gb_videos$trending_date)
gb_videos$year <- as.Date(gb_videos$trending_date, format = "%Y")
gb_videos$year
gb_videos$year <- format(gb_videos$trending_date,"%Y")
gb_videos$year
summary(gb_videos$year)
table(gb_videos$year)
plot(table(gb_videos$year))
plot(table(gb_videos$year), col = "red")
p <- plot_ly(=~gb_videos$year)
print(p)
p <- plot_ly(gb_videos$year)
if (!require("plotly")) install.packages("plotly")
library(plotly)
p <- plot_ly(gb_videos$year)
p <- plot_ly(gb_videos, gb_videos$year)
print(p)
barplot(gb_videos$year, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
barplot(gb_videos$year, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(gb_videos$year))
#Dataset collection years
#Let's see in which years the dataset was collected
counts<-table(gb_videos$year)
counts<-table(gb_videos$year)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
counts<-table(gb_videos$year)
barplot(counts, main="Number of Videos by Year",
xlab="Year", col=c("darkblue","red"),
legend = rownames(counts))
#Describtion of numerical columns
#Now, let's see some statistical information about the numerical columns of our dataset
summary(gb_videos)
#Describtion of numerical columns
#Now, let's see some statistical information about the numerical columns of our dataset
gb_videos %>%
select_if(is.numeric)
gb_videos %>%
select_if(is.numeric) %>%
summarise_all(funs(list(summary(.))))
View(gb_videos)
x<- "HELLO my name iS karen"
x.split
strsplit.split
strsplit.split(x)
strsplit(x)
strsplit(x,split)
str_split(x)
x<- "HELLO my name iS karen"
str_split(x)
str_split(x," ")
for (w in str_split(x," ")){
print(w)
# if (w.isupper){
#   return(TRUE)
# } else {
#   return(FALSE)
# }
}
str_split(x," ")
for (w in str_split(x," ")[1]){
print(w)
# if (w.isupper){
#   return(TRUE)
# } else {
#   return(FALSE)
# }
}
for (w in str_split(x," ")[[1]]){
print(w)
# if (w.isupper){
#   return(TRUE)
# } else {
#   return(FALSE)
# }
}
grepl("^[[:upper:]]+$", "HELLO")
grepl("^[[:upper:]]+$", "hello")
grepl("^[[:upper:]]+$", "Hello")
grepl("^[[:upper:]]+$", "HELLObbss")
contains_capitalized_word <- function(title){
for (word in str_split(title," ")[[1]]){ #split each word in title out into chunks
if (grepl("^[[:upper:]]+$", word)){ #check if whole word is uppercase
return(TRUE)
} else {
return(FALSE)
}
}
}
videos[,"contains_capitalized"] = contains_capitalized_word(videos[,"title"])
videos[,"contains_capitalized"]
gb_videos[,"contains_capitalized"] = contains_capitalized_word(gb_videos[,"title"])
View(gb_videos)
gb_videos[,"title"]
contains_capitalized_word("HERO Johnnie Langendorff Fires Back at Sutherland Springs Shooter!")
gb_videos[,"contains_capitalized"] = apply(gb_videos$title, 1,contains_capitalized_word)
contains_capitalized_word <- function(row){
title = row['title'][1]
for (word in str_split(title," ")[[1]]){ #split each word in title out into chunks
if (grepl("^[[:upper:]]+$", word)){ #check if whole word is uppercase
return(TRUE)
} else {
return(FALSE)
}
}
}
gb_videos[,"contains_capitalized"] = apply(gb_videos, 1,contains_capitalized_word)
View(gb_videos)
counts <- table(gb_videos$contains_capitalized)
counts <- table(gb_videos$contains_capitalized)
counts
pie(counts, main="Number of Videos by Year",
xlab="Year", col=c("darkblue","red"),
legend = rownames(counts))
counts <- table(gb_videos$contains_capitalized)
table(gb_videos$contains_capitalized)
prop.table(gb_videos$contains_capitalized)
table(gb_videos$contains_capitalized)
prop.table(gb_videos$contains_capitalized)
prop.table(table(gb_videos$contains_capitalized))
gb_videos[,"title_length"] = str_length(gb_videos[,"title"])
gb_videos[,"title_length"]
gb_videos[,"description_length"] = str_length(gb_videos[,"description"])
barplot(gb_videos$title_length, main="Number of Videos by Year",
xlab="Year", col=c("darkblue","red"),
legend = rownames(gb_videos$title_length))
hist(gb_videos$title_length)
hist(gb_videos$description_length)
hist(gb_videos$title_length)
#We can see that title-length distribution resembles a normal distribution,
#where most videos have title lengths between 30 and 60 character approximately.
#Now let's draw a scatter plot between title length and number of views to see the relationship between these two variables
scatterplot(gb_videos$views, gb_videos$title_length)
#Now let's draw a scatter plot between title length and number of views to see the relationship between these two variables
plot(gb_videos$views, gb_videos$title_length, type = "scatter")
#Now let's draw a scatter plot between title length and number of views to see the relationship between these two variables
plot(gb_videos$views, gb_videos$title_length)
cor(gb_videos)
#Let's see the correlation table between our dataset variables (numerical and boolean variables only)
myColumns <- sapply(gb_videos, function(x) !is.factor(x))
myColumns
cor(gb_videos[,myColumns])
cor(gb_videos[myColumns])
#Let's see the correlation table between our dataset variables (numerical and boolean variables only)
myColumns <- apply(gb_videos, function(x) !is.factor(x)) #get only numeric columns
#Let's see the correlation table between our dataset variables (numerical and boolean variables only)
nums <- unlist(lapply(gb_videos, is.numeric))
nums
cor(gb_videos[,nums])
cor_analysis <- as.data.frame(cor(gb_videos[,nums]))
View(cor_analysis)
plot(cor(gb_videos[,nums]))
corrplot(gb_videos[,nums])
gb_videos[,nums]
corrplot(gb_videos[,nums])
corrplot(gb_videos[,nums])
corrplot(gb_videos)
gb_videos
corrplot(gb_videos[,nums])
corrplot(as.matrix(gb_videos[,nums]))
as.matrix(gb_videos[,nums])
matrix(gb_videos[,nums])
as.matrix(gb_videos[,nums])
corrplot(as.matrix(gb_videos[,nums]))
corrplot(corrgram(gb_videos[,nums]))
cor_analysis
corrplot(as.data.frame(cor(gb_videos[,nums])))
corrplot(gb_videos)
corrplot(as.matrix(gb_videos))
corrplot(gb_videos[,nums], is.corr = FALSE)
corrplot(as.matrix(gb_videos[,nums]), is.corr = FALSE)
corrplot.mixed(corr = cor(gb_videos[,nums]))
#Create a vector containing only the text
titles <- gb_videos$title
#Create a corpus
docs <- Corpus(VectorSource(titles))
docs
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 1,           max.words=200, random.order=FALSE, rot.per=0.35,            colors=brewer.pal(8, "Dark2"))
df
View(df)
