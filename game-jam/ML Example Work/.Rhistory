#Make column based on page journey throughout visit - use new path with *!
data <- data[order(data$visitor_id, data$visit_id, data$created),]
page_paths_visit <- ddply(data,c("visitor_id","visit_id"),
function(df1)paste(df1$path_new,
collapse = "->"))
colnames(page_paths_visit) <- c("visitor_id", "visit_id", "path_visit_new")
View(page_paths_visit)
merged_data <- merge(data, page_paths_visit, by = c("visitor_id", "visit_id"))
#Seperated this out per sale_final - This means, that is a vistor has a sale, the visits leading upto that will create one journey,
#but then visits after sale, will have their own journey. This allows us to see which pages/journeys help/hinder conversions.
page_paths_visitor <- ddply(merged_data,c("visitor_id", "sale_final"),
function(df1)paste(df1$path_new,
collapse = "->"))
View(merged_data)
data$sale_final <- data[!is.na(data$fm_sales),]
data$fm_sales
#create function to get the last page of the journey - this will be used to see where people drop off
last_page_journey <- function(x, visit_visitor){
if (visit_visitor == "visit"){
path <- x["path_visit_new"][[1]]
} else {
path <- x["path_visitor_new"][[1]]
}
last_chevron_index <- unlist(gregexpr(pattern ='->',path))[length(unlist(gregexpr(pattern ='->',path)))] # this will be used to get last page
#this will be used to get last page
if(length(unlist(gregexpr(pattern ='->',path))[-1]) > 0){
last_page <- substr(path,last_chevron_index+2,nchar(path))  #+2 as index on - of ->, so +2 characters
return(gsub("*", "", last_page, fixed=TRUE))
} else {
return(path)
}
}
merged_data$last_page_visit <- apply(merged_data, 1, last_page_journey, "visit")
merged_data$last_page_visitor <- apply(merged_data, 1, last_page_journey, "visitor")
View(merged_data)
#CRO Strategy - Identifying Pages for Optimisation
if (!require("RMySQL")) install.packages("RMySQL")
library("RMySQL")
if(!require(reshape2)) install.packages("reshape2")
library(reshape2)
if(!require(stringr)) install.packages("stringr")
library(stringr)
if(!require(plyr)) install.packages("plyr")
library(plyr)
if(!require(formattable)) install.packages("formattable")
library(formattable)
#########################
####  SQL DATA GRAB  ####
#########################
vsdb = dbConnect(MySQL(), user='emilyd',
dbname='cubed_a_rox_uk',
host='staging1-multidb3.cevhomzj8can.eu-west-1.rds.amazonaws.com',
password='RegretParsnips7')
#data
page_data <- dbSendQuery(vsdb,
"select
b.visitor_id, a.visit_id, g.name as 'channel', h.browser_family, a.url as 'path', a.created,
c.lc_sales, c.fm_sales, e.name,
d.first_visit, d.last_visit,
b.first_visit as 'visit_date'
from attrib_page a
join attrib_visit b on b.id = a.visit_id
join attrib_visit_details h on h.visit_id = a.visit_id
left join report_sales c on c.`visit_id` = a.visit_id
left join attrib_product e on e.id = c.product_id
join `attrib_visitor` d on d.id = b.visitor_id
join attrib_pattern f on f.id = b.pattern_id
join attrib_referer g on g.id = f.referer_id
where d.first_visit > date('2019-08-30 23:59:59') - INTERVAL 30 DAY and d.last_visit <= '2019-08-30 23:59:59'
order by b.visitor_id, a.visit_id, a.created asc")
data = dbFetch(page_data, n=-1)
#####################
####  FUNCTIONS  ####
#####################
'%!in%' <- function(x,y)!('%in%'(x,y))
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
#extracts last n chaacter from string
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#####################
##  DATA CLEANING ##
#####################
#Clean the data!
data$visit_date <- as.POSIXct(data$visit_date, format="%Y-%m-%d %H:%M:%S") #convert to date object
#Convert sale date to date - in past so we get negative numbers when we minus sale date - visit date!
# data$sales_date <- as.character(data$sales_date)
# data[,"sales_date"][is.na(data[,"sales_date"])] = "2000-01-01 00:00:00"
#data$sales_date <- as.POSIXct(data$sales_date, format="%Y-%m-%d %H:%M:%S") #convert to date object
data$path <- gsub("https://www.rox.co.uk", "", data$path)
#Becasue Safari, we ned to exclude all safari browsers with landing page '/' as we don't know if its true!
# visitor_ids_exclude <- data[grepl("Safari", data$browser_family) & data$path == "/","visitor_id"]
# data <- data[data$visitor_id %!in% visitor_ids_exclude,]
################
#Cleaning Paths#
################
#Change the path field so that all paths end in '/' so stop the same page splitting into i.e. '/engagment-rings' and '/engagment-rings/'
path_clean <- function(x){
path <- x["path"][[1]]
print(substrRight(path, 1))
if (substrRight(path, 1) != "/"){
return(paste(path,"/", sep = ""))
} else {
return(path)
}
}
data$path <- apply(data, 1, path_clean)
#Place path within *path*, so we can select pages more easily i.e. only select path journeys with *engagemnet-rings/* without slecting /engagemnet-rings/all!
data$path_new <- paste("*",data$path, "*", sep="")
#Make column based on page journey throughout visit - use new path with *!
data <- data[order(data$visitor_id, data$visit_id, data$created),]
page_paths_visit <- ddply(data,c("visitor_id","visit_id"),
function(df1)paste(df1$path_new,
collapse = "->"))
colnames(page_paths_visit) <- c("visitor_id", "visit_id", "path_visit_new")
merged_data <- merge(data, page_paths_visit, by = c("visitor_id", "visit_id"))
#create function to get the last page of the journey - this will be used to see where people drop off
last_page_journey <- function(x, visit_visitor){
if (visit_visitor == "visit"){
path <- x["path_visit_new"][[1]]
} else {
path <- x["path_visitor_new"][[1]]
}
last_chevron_index <- unlist(gregexpr(pattern ='->',path))[length(unlist(gregexpr(pattern ='->',path)))] # this will be used to get last page
#this will be used to get last page
if(length(unlist(gregexpr(pattern ='->',path))[-1]) > 0){
last_page <- substr(path,last_chevron_index+2,nchar(path))  #+2 as index on - of ->, so +2 characters
return(gsub("*", "", last_page, fixed=TRUE))
} else {
return(path)
}
}
merged_data$last_page_visit <- apply(merged_data, 1, last_page_journey, "visit")
standardize
standardize
#CRO Strategy - Identifying Pages for Optimisation
if (!require("RMySQL")) install.packages("RMySQL")
library("RMySQL")
if(!require(plotly)) install.packages("plotly")
library(plotly)
if(!require(plyr)) install.packages("plyr")
library(plyr)
if(!require(formattable)) install.packages("formattable")
library(formattable)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
#########################
####  SQL DATA GRAB  ####
#########################
vsdb = dbConnect(MySQL(), user='emilyd',
dbname='cubed_a_schroders_sg',
host='staging1-multidb3.cevhomzj8can.eu-west-1.rds.amazonaws.com',
password='RegretParsnips7')
#data - sales
data_sales <- dbSendQuery(vsdb,
"select aa.visitor_id, aa.id as 'visit_id', aa.first_visit, aa.last_visit, ad.event_item_id,
ad.lc_sales, ad.lc_revenue, ad.fm_sales, ad.fm_revenue, ad.sales_date, c.name as 'channel'
from attrib_visit aa
join report_sales ad on aa.id = ad.visit_id
join attrib_pattern b on b.id = aa.pattern_id
join attrib_referer c on c.id = b.referer_id
where ad.sales_date > '2019-06-01 00:00:00'
and ad.product_id = 2")
data_sales = dbFetch(data_sales, n=-1)
#data - sales
data_ppc <- dbSendQuery(vsdb,
"select f.visitor_id, agv.visit_id,
d.ad_group_name,
d.campaign_name,
d.keyword,
agv.visit_date,
e.cost,
1 as visits
from adwords_gclid_visits agv
JOIN adwords_gclid c on agv.gclid = c.gclid
JOIN adwords_search d on c.keyword_id = d.keyword_id and d.ad_group_id = c.ad_group_id and c.campaign_id = d.campaign_id and c.date = d.date
JOIN attrib_visit f on f.id = agv.visit_id
left join agg_costs_per_visit e on agv.visit_id = e.visit_id
where agv.visit_date > '2018-10-01 00:00:00'
")
ppcdata = dbFetch(data_ppc, n=-1)
visit_duplicate <- aggregate(data_sales$event_item_id~data_sales$visit_id, FUN=length)
colnames(visit_duplicate) <- c("visit_id", "visit_duplicate_count")
data <- merge(data_sales, visit_duplicate, by = c("visit_id"))
#Get only the viistor ID's from data sales, and grab data between our given dates, and the visitor ID's from sales data (to get previous visits.)
visitor_ids <- unique(data$visitor_id)
ppcdata$visit_date <- as.POSIXct(ppcdata$visit_date, format="%Y-%m-%d %H:%M:%S")
ppcdata <- ppcdata[ppcdata$visitor_id %in% visitor_ids | ppcdata$visit_date > '2019-06-01 00:00:00',]
ppcdata <- merge(data,ppcdata, by=c("visit_id"), all=TRUE)
#PPC Campaign data
agg_ppc_camp_sales <- aggregate(ppcdata$fm_sales~ppcdata$campaign_name, FUN=sum)
colnames(agg_ppc_camp_sales) <- c("campaign_name","fm_sales")
agg_ppc_camp_costs <- aggregate(ppcdata$cost~ppcdata$campaign_name, FUN = sum)
colnames(agg_ppc_camp_costs) <- c("campaign_name","cost")
agg_ppc_camp_visits <- aggregate(ppcdata$visits~ppcdata$campaign_name, FUN = sum)
colnames(agg_ppc_camp_visits) <- c("campaign_name","visits")
agg_ppc_camp_rev <- aggregate(ppcdata$fm_revenue~ppcdata$campaign_name, FUN=sum, na.action = na.omit)
colnames(agg_ppc_camp_rev) <- c("campaign_name","fm_rev")
ppc_camp_summary <- merge(agg_ppc_camp_visits,agg_ppc_camp_sales,by = "campaign_name", all.x = TRUE)
ppc_camp_summary <- merge(ppc_camp_summary, agg_ppc_camp_costs, by = "campaign_name", all.x = TRUE)
ppc_camp_summary <- merge(ppc_camp_summary, agg_ppc_camp_rev, by = "campaign_name", all.x = TRUE)
ppc_camp_summary$fm_sales <- round(ppc_camp_summary$fm_sales, 2)
ppc_camp_summary$fm_rev <- round(ppc_camp_summary$fm_rev, 2)
ppc_camp_summary$CPA <- round(ppc_camp_summary$cost / ppc_camp_summary$fm_sales,2)
ppc_camp_summary$CPC <- round(ppc_camp_summary$cost / ppc_camp_summary$visits,2)
ppc_camp_summary$CR <- round(ppc_camp_summary$fm_sales / ppc_camp_summary$visits,4)
ppc_camp_summary$ROI <- (round((ppc_camp_summary$fm_rev - ppc_camp_summary$cost )/ppc_camp_summary$cost,4))*100
ppc_camp_summary$COS <- (round(ppc_camp_summary$cost/ppc_camp_summary$fm_rev,2))*100
#save(ppc_camp_summary, file = "Data/ppc_data.Rda")
#load("Data/ppc_data.Rda")
#ppc_camp_summary <- ppc_camp_summary[which(ppc_camp_summary$fm_sales > 5),]
ppc_camp_summary$campaign_name <- factor(ppc_camp_summary$campaign_name, levels = unique(ppc_camp_summary$campaign_name)[order(ppc_camp_summary$fm_sales, decreasing = TRUE)])
ppc_camp_summary <- ppc_camp_summary[ppc_camp_summary$visits > 10,]
ppc_camp_summary$campaign_name <- factor(ppc_camp_summary$campaign_name)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$visits,
name = "Visits",
type = "bar",
text = ppc_camp_summary$visits,
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
add_trace(y = ~ppc_camp_summary$fm_sales,
name = 'FM Goal Completions',
text = round(ppc_camp_summary$fm_sales)) %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE, list(title="Campaign Name")),
title = paste("Adwords Campaign Summary"),
yaxis = list(title="Visits"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$CR,
name = "Conversion Rate",
type = "bar",
text = paste(round(ppc_camp_summary$CR * 100, digits = 2),"%"),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="Conversion Rate"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$CPA,
name = "Cost Per Conversion",
type = "bar",
text = round(ppc_camp_summary$CPA,digits = 2),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
add_trace(y = ~ppc_camp_summary$CPC,
name = 'Cost Per Click',
text = round(ppc_camp_summary$CPC)) %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="CPA"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$CPC,
name = "Cost Per Click",
type = "bar",
text = round(ppc_camp_summary$CPC,digits = 2),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="Cost Per Click"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$cost,
name = "Cost",
type = "bar",
text = round(ppc_camp_summary$cost,digits = 2),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="Cost"))
print(p)
ppc_camp_summary <- ppc_camp_summary[order(ppc_camp_summary$CPA),]
#data - average positions!
data_avg_pos <- dbSendQuery(vsdb,
"select a.campaign_id, a.campaign_name, round(avg(case when a.average_position = 0 then 1 else a.average_position end),2) as average_position
from adwords_search a
where a.date > '2019-06-01 00:00:00'
group by a.campaign_id")
data_avg_pos = dbFetch(data_avg_pos, n=-1)
ppc_camp_summary_merge <- merge(ppc_camp_summary, data_avg_pos, by = c("campaign_name"), all = TRUE)
ppc_camp_summary_merge <- ppc_camp_summary_merge[order(-ppc_camp_summary_merge$COS),]
## Table of keyword data
ppc_camp_summary_merge$fm_sales <- ifelse(is.na(ppc_camp_summary_merge$fm_sales),0,round(ppc_camp_summary_merge$fm_sales,digits = 2))
ppc_camp_summary_merge$CPA <- ifelse(is.na(ppc_camp_summary_merge$CPA),0,ppc_camp_summary_merge$CPA)
ppc_camp_summary_merge$CR <- ifelse(is.na(ppc_camp_summary_merge$CR),0,paste(round(ppc_camp_summary_merge$CR * 100,digits = 2),"%"))
ppc_camp_summary_merge$cost <- ifelse(is.na(ppc_camp_summary_merge$cost),0,paste("£", round(ppc_camp_summary_merge$cost,digits = 2)))
ppc_camp_summary_merge$CPA <- ifelse(is.na(ppc_camp_summary_merge$CPA),0,paste("£", round(ppc_camp_summary_merge$CPA,digits = 2)))
ppc_camp_summary_merge$CPC <- ifelse(is.na(ppc_camp_summary_merge$CPC),0,paste("£", round(ppc_camp_summary_merge$CPC,digits = 2)))
ppc_camp_summary_merge$COS <- ifelse(is.na(ppc_camp_summary_merge$ROI),0,paste(round(ppc_camp_summary_merge$COS,digits = 2),"%"))
ppc_camp_summary_merge$ROI <- ifelse(is.na(ppc_camp_summary_merge$ROI),0,paste(round(ppc_camp_summary_merge$ROI,digits = 2),"%"))
ppc_camp_summary_merge <- ppc_camp_summary_merge[c("campaign_name", "visits",
"fm_sales", "cost", "CPC", "CPA", "CR", "campaign_id", "average_position")]
row.names(ppc_camp_summary_merge) <- NULL
brand_camp <- ppc_camp_summary_merge[grep("Brand",ppc_camp_summary_merge$campaign_name),]
generic_camp <- ppc_camp_summary_merge[grep("Generic",ppc_camp_summary_merge$campaign_name),]
formattable(ppc_camp_summary_merge,
align =c("l", "c", "c", "c", "c", "c", "c"),
list(`Indicator Name` = formatter(
"span", style = ~ style(color = "grey",font.weight = "bold"))
))
vsdb = dbConnect(MySQL(), user='emilyd',
dbname='cubed_a_schroders_hk',
host='staging1-multidb3.cevhomzj8can.eu-west-1.rds.amazonaws.com',
password='RegretParsnips7')
#data - sales
data_sales <- dbSendQuery(vsdb,
"select aa.visitor_id, aa.id as 'visit_id', aa.first_visit, aa.last_visit, ad.event_item_id,
ad.lc_sales, ad.lc_revenue, ad.fm_sales, ad.fm_revenue, ad.sales_date, c.name as 'channel'
from attrib_visit aa
join report_sales ad on aa.id = ad.visit_id
join attrib_pattern b on b.id = aa.pattern_id
join attrib_referer c on c.id = b.referer_id
where ad.sales_date > '2019-06-01 00:00:00'
and ad.product_id = 2")
data_sales = dbFetch(data_sales, n=-1)
#data - sales
data_ppc <- dbSendQuery(vsdb,
"select f.visitor_id, agv.visit_id,
d.ad_group_name,
d.campaign_name,
d.keyword,
agv.visit_date,
e.cost,
1 as visits
from adwords_gclid_visits agv
JOIN adwords_gclid c on agv.gclid = c.gclid
JOIN adwords_search d on c.keyword_id = d.keyword_id and d.ad_group_id = c.ad_group_id and c.campaign_id = d.campaign_id and c.date = d.date
JOIN attrib_visit f on f.id = agv.visit_id
left join agg_costs_per_visit e on agv.visit_id = e.visit_id
where agv.visit_date > '2018-10-01 00:00:00'
")
ppcdata = dbFetch(data_ppc, n=-1)
visit_duplicate <- aggregate(data_sales$event_item_id~data_sales$visit_id, FUN=length)
colnames(visit_duplicate) <- c("visit_id", "visit_duplicate_count")
data <- merge(data_sales, visit_duplicate, by = c("visit_id"))
#Get only the viistor ID's from data sales, and grab data between our given dates, and the visitor ID's from sales data (to get previous visits.)
visitor_ids <- unique(data$visitor_id)
ppcdata$visit_date <- as.POSIXct(ppcdata$visit_date, format="%Y-%m-%d %H:%M:%S")
ppcdata <- ppcdata[ppcdata$visitor_id %in% visitor_ids | ppcdata$visit_date > '2019-06-01 00:00:00',]
ppcdata <- merge(data,ppcdata, by=c("visit_id"), all=TRUE)
#ppcdata$campaign_name[ppcdata$campaign_name<"Brand > Pure Brand"] <- "[Brand] - [Pure] - [E]"
#PPC Campaign data
agg_ppc_camp_sales <- aggregate(ppcdata$fm_sales~ppcdata$campaign_name, FUN=sum)
colnames(agg_ppc_camp_sales) <- c("campaign_name","fm_sales")
agg_ppc_camp_costs <- aggregate(ppcdata$cost~ppcdata$campaign_name, FUN = sum)
colnames(agg_ppc_camp_costs) <- c("campaign_name","cost")
agg_ppc_camp_visits <- aggregate(ppcdata$visits~ppcdata$campaign_name, FUN = sum)
colnames(agg_ppc_camp_visits) <- c("campaign_name","visits")
agg_ppc_camp_rev <- aggregate(ppcdata$fm_revenue~ppcdata$campaign_name, FUN=sum, na.action = na.omit)
colnames(agg_ppc_camp_rev) <- c("campaign_name","fm_rev")
ppc_camp_summary <- merge(agg_ppc_camp_visits,agg_ppc_camp_sales,by = "campaign_name", all.x = TRUE)
ppc_camp_summary <- merge(ppc_camp_summary, agg_ppc_camp_costs, by = "campaign_name", all.x = TRUE)
ppc_camp_summary <- merge(ppc_camp_summary, agg_ppc_camp_rev, by = "campaign_name", all.x = TRUE)
ppc_camp_summary$fm_sales <- round(ppc_camp_summary$fm_sales, 2)
ppc_camp_summary$fm_rev <- round(ppc_camp_summary$fm_rev, 2)
ppc_camp_summary$CPA <- round(ppc_camp_summary$cost / ppc_camp_summary$fm_sales,2)
ppc_camp_summary$CPC <- round(ppc_camp_summary$cost / ppc_camp_summary$visits,2)
ppc_camp_summary$CR <- round(ppc_camp_summary$fm_sales / ppc_camp_summary$visits,4)
ppc_camp_summary$ROI <- (round((ppc_camp_summary$fm_rev - ppc_camp_summary$cost )/ppc_camp_summary$cost,4))*100
ppc_camp_summary$COS <- (round(ppc_camp_summary$cost/ppc_camp_summary$fm_rev,2))*100
#save(ppc_camp_summary, file = "Data/ppc_data.Rda")
#load("Data/ppc_data.Rda")
#ppc_camp_summary <- ppc_camp_summary[which(ppc_camp_summary$fm_sales > 5),]
ppc_camp_summary$campaign_name <- factor(ppc_camp_summary$campaign_name, levels = unique(ppc_camp_summary$campaign_name)[order(ppc_camp_summary$fm_sales, decreasing = TRUE)])
ppc_camp_summary <- ppc_camp_summary[ppc_camp_summary$visits > 10,]
ppc_camp_summary$campaign_name <- factor(ppc_camp_summary$campaign_name)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$visits,
name = "Visits",
type = "bar",
text = ppc_camp_summary$visits,
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
add_trace(y = ~ppc_camp_summary$fm_sales,
name = 'FM Goal Completions',
text = round(ppc_camp_summary$fm_sales)) %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE, list(title="Campaign Name")),
title = paste("Adwords Campaign Summary"),
yaxis = list(title="Visits"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$CR,
name = "Conversion Rate",
type = "bar",
text = paste(round(ppc_camp_summary$CR * 100, digits = 2),"%"),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="Conversion Rate"))
print(p)
p <-plot_ly(
x = ~ppc_camp_summary$campaign_name,
y = ~ppc_camp_summary$CPA,
name = "Cost Per Conversion",
type = "bar",
text = round(ppc_camp_summary$CPA,digits = 2),
textposition = 'auto'
#color = ~page_cat_results$category
)  %>%
add_trace(y = ~ppc_camp_summary$CPC,
name = 'Cost Per Click',
text = round(ppc_camp_summary$CPC)) %>%
layout(xaxis = list(showticklabels = TRUE,tickangle = 45,title="Campaign Name", showgrid = TRUE),
title = paste("Adwords Campaign Summary"),
xaxis = list(title="Campaign Name"),
yaxis = list(title="CPA"))
print(p)
setwd("~/Documents/Work/Game Jam/ML Example Work")
library(RMySQL)
library(dplyr)
library(reshape2)
library(rsample)
library(recipes)
#library(corrr)
library(yardstick)
library(forcats)
library(tfruns)
library(keras)
library(tensorflow)
lapply(dbListConnections(MySQL()), dbDisconnect)
yard_data <- read.csv("yard_data.csv")
View(yard_data)
yard_data <- read.csv("yard_data.csv")
source('model_source.R')
#Set Hyperparams:
nodes1 = c(1000,500)
nodes2 = c(100)
dropout1 = c(0.1)
dropout2 = c(0.1)
optimizer = c("adam")
lr_annealing = c(0.01)
batch_size = c(50)
epochs = c(30)
combinations <- length(nodes1) * length(nodes2) * length(dropout1) *
length(dropout2) * length(optimizer) * length(lr_annealing) * length(batch_size) * length(epochs)
#Test different variations of hyperparameters using model_tune function from model_source.R!
results_df <- data.frame()
run_num <- 1
for (n1 in nodes1){
for (n2 in nodes2){
for(d1 in dropout1){
for (d2 in dropout2){
for (opt in optimizer){
for (lr in lr_annealing){
for (bs in batch_size){
for (e in epochs){
print(paste("Run number ",run_num,"/",combinations, sep=""))
run_num <- run_num + 1
result <- model_tune(yard_data,n1,n2,d1,d2,opt,lr,bs,e)
results_df <- rbind(results_df, result)
#rm(result)
gc()
}
}
}
}
}
}
}
}
epochs = c(5)
combinations <- length(nodes1) * length(nodes2) * length(dropout1) *
length(dropout2) * length(optimizer) * length(lr_annealing) * length(batch_size) * length(epochs)
#Test different variations of hyperparameters using model_tune function from model_source.R!
results_df <- data.frame()
run_num <- 1
for (n1 in nodes1){
for (n2 in nodes2){
for(d1 in dropout1){
for (d2 in dropout2){
for (opt in optimizer){
for (lr in lr_annealing){
for (bs in batch_size){
for (e in epochs){
print(paste("Run number ",run_num,"/",combinations, sep=""))
run_num <- run_num + 1
result <- model_tune(yard_data,n1,n2,d1,d2,opt,lr,bs,e)
results_df <- rbind(results_df, result)
#rm(result)
gc()
}
}
}
}
}
}
}
}
